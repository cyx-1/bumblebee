name: Deploy Lambda Function

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  LAMBDA_FUNCTION_NAME: bumblebee-test-lambda
  LAMBDA_ROLE_NAME: bumblebee-lambda-execution-role

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          echo "No requirements.txt found, skipping dependency installation"
        fi
        
    - name: Prepare Lambda handler
      run: |
        # Create a lambda_function.py that imports and runs test.py
        cat > lambda_function.py << 'EOF'
        import sys
        import os
        
        # Add src directory to Python path
        sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))
        
        def lambda_handler(event, context):
            try:
                # Import and execute test.py
                import test
                return {
                    'statusCode': 200,
                    'body': 'Test function executed successfully'
                }
            except Exception as e:
                return {
                    'statusCode': 500,
                    'body': f'Error executing test function: {str(e)}'
                }
        EOF
    - name: Package Lambda function
      run: |
        zip -r lambda-function.zip lambda_function.py src/ -x "src/__pycache__/*" "*.pyc"
        
    - name: Get AWS Account ID
      id: aws-account
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "account-id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
        echo "AWS Account ID: $ACCOUNT_ID"
        
    - name: Check if IAM role exists
      id: check-role
      run: |
        if aws iam get-role --role-name ${{ env.LAMBDA_ROLE_NAME }} >/dev/null 2>&1; then
          echo "role-exists=true" >> $GITHUB_OUTPUT
          echo "IAM role ${{ env.LAMBDA_ROLE_NAME }} exists"
        else
          echo "role-exists=false" >> $GITHUB_OUTPUT
          echo "IAM role ${{ env.LAMBDA_ROLE_NAME }} does not exist"
        fi
        
    - name: Create IAM role for Lambda
      if: steps.check-role.outputs.role-exists == 'false'
      run: |
        echo "Creating IAM role: ${{ env.LAMBDA_ROLE_NAME }}"
        
        # Create trust policy document
        cat > trust-policy.json << 'EOF'
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
        EOF
        
        # Create the role
        aws iam create-role \
          --role-name ${{ env.LAMBDA_ROLE_NAME }} \
          --assume-role-policy-document file://trust-policy.json \
          --description "Execution role for Bumblebee Lambda function"
        
        # Attach basic Lambda execution policy
        aws iam attach-role-policy \
          --role-name ${{ env.LAMBDA_ROLE_NAME }} \
          --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        
        # Wait for role to be available
        echo "Waiting for IAM role to be available..."
        sleep 10
        
    - name: Check if Lambda function exists
      id: check-function
      run: |
        if aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} >/dev/null 2>&1; then
          echo "function-exists=true" >> $GITHUB_OUTPUT
          echo "Lambda function ${{ env.LAMBDA_FUNCTION_NAME }} exists"
        else
          echo "function-exists=false" >> $GITHUB_OUTPUT
          echo "Lambda function ${{ env.LAMBDA_FUNCTION_NAME }} does not exist"
        fi

    - name: Create Lambda function
      if: steps.check-function.outputs.function-exists == 'false'
      run: |        
        echo "Creating new Lambda function: ${{ env.LAMBDA_FUNCTION_NAME }}"
        aws lambda create-function \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --runtime python3.12 \
          --role arn:aws:iam::${{ steps.aws-account.outputs.account-id }}:role/${{ env.LAMBDA_ROLE_NAME }} \
          --handler lambda_function.lambda_handler \
          --zip-file fileb://lambda-function.zip \
          --description "Bumblebee test Lambda function" \
          --timeout 30 \
          --memory-size 128
        
    - name: Update Lambda function code
      if: steps.check-function.outputs.function-exists == 'true'
      run: |
        echo "Updating existing Lambda function: ${{ env.LAMBDA_FUNCTION_NAME }}"
        aws lambda update-function-code \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --zip-file fileb://lambda-function.zip
          
    - name: Wait for Lambda function to be ready
      run: |
        echo "Waiting for Lambda function to be in Active state..."
        aws lambda wait function-active --function-name ${{ env.LAMBDA_FUNCTION_NAME }}
        echo "Lambda function is now active and ready for invocation"
          
    - name: Test Lambda function
      run: |
        echo "Testing Lambda function..."
        aws lambda invoke \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --payload '{}' \
          response.json
        
        echo "Lambda function response:"
        cat response.json
        
    - name: Display deployment information
      run: |        
        echo "ðŸš€ Deployment completed successfully!"
        echo "Function Name: ${{ env.LAMBDA_FUNCTION_NAME }}"
        echo "Region: ${{ env.AWS_REGION }}"
        echo "Runtime: python3.12"
        echo "Handler: lambda_function.lambda_handler"
        
        # Get function details
        aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --query 'Configuration.[FunctionName,Runtime,Handler,LastModified,CodeSize]' --output table